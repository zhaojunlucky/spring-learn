CREATE TABLE spring.users(
      id bigint generated by default as identity(start with 1) PRIMARY KEY,
      username varchar(64) not null,
      password varchar(128) not null,
      enabled boolean not null,
      created_at timestamp without time zone DEFAULT NOW() NOT null,
      last_login timestamp without time zone,
      UNIQUE(username)
);

create table spring.authorities (
      id bigint generated by default as identity(start with 1) PRIMARY KEY,
      authority varchar(50) not null,
      UNIQUE(authority)
);

create table user_authorities (
      user_id bigint not null,
      authority_id bigint not null,
      grant_date timestamp without time zone DEFAULT NOW() NOT null,
      constraint fk_ua_user_id foreign key(user_id) references spring.users(id),
      constraint fk_ua_authority_id foreign key(authority_id) references spring.authorities(id)
);

create unique index ix_user_auth on spring.user_authorities (user_id,authority_id);

create table spring.groups (
  id bigint generated by default as identity(start with 1) primary key,
  group_name varchar(50) not null unique
);

create table spring.group_authorities (
  group_id bigint not null,
  authority_id bigint not null,
  constraint fk_ga_group_id foreign key(group_id) references spring.groups(id),
  constraint fk_ga_authority_id foreign key(authority_id) references spring.authorities(id)
);

create unique index ix_group_authorities on spring.group_authorities (group_id,authority_id);

create table spring.group_members (
  user_id bigint not null,
  group_id bigint not null,
  grant_date timestamp without time zone DEFAULT NOW() NOT null,
  constraint fk_gm_user_id foreign key(user_id) references spring.users(id),
  constraint fk_gm_group_id foreign key(group_id) references spring.groups(id)
);

create unique index ix_group_members on spring.group_members (user_id,group_id);
