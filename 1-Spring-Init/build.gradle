buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}

	dependencies {
		classpath 'org.jooq:jooq-codegen:3.15.5'
		classpath 'com.h2database:h2:2.0.202'
	}
}


plugins {
	id 'org.springframework.boot' version '2.6.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'org.springframework.experimental.aot' version '0.11.0-RC1'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.magicworldz'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	maven { url 'https://repo.spring.io/milestone' }
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-quartz'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.springframework.retry:spring-retry'
	// https://mvnrepository.com/artifact/org.codehaus.janino/janino
	implementation 'org.codehaus.janino:janino:3.1.6'
	// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	implementation 'org.apache.commons:commons-lang3:3.12.0'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//testImplementation 'org.springframework.security:spring-security-test'
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
	println("${task.name}: ${state.isFromCache()}")
}

test {
	useJUnitPlatform()
}

bootBuildImage {
	builder = 'paketobuildpacks/builder:tiny'
	environment = ['BP_NATIVE_IMAGE': 'true']
}

task jooqGenerate {
	doFirst {
		def configuration = new org.jooq.meta.jaxb.Configuration().withJdbc(new org.jooq.meta.jaxb.Jdbc()
				.withDriver("org.h2.Driver")
				.withUrl("jdbc:h2:~/test")
				.withUser("sa")
				.withPassword("sa"))
				.withGenerator(new org.jooq.meta.jaxb.Generator()
						.withDatabase(new org.jooq.meta.jaxb.Database()
								.withName("org.jooq.meta.h2.H2Database")
								.withIncludes(".*")
								.withExcludes("")
								.withInputSchema("public"))
						.withTarget(new org.jooq.meta.jaxb.Target()
								.withPackageName("com.magicworldz.springlearn.db")
								.withDirectory("src/main/generated")));

		org.jooq.codegen.GenerationTool.generate(configuration)
	}
}